import { Injectable } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import {
  CreateFoodScheduleDto,
  UpdateFoodScheduleDto,
} from './dto/food-schedule.dto';
import { startOfMonth, endOfMonth, eachDayOfInterval, format } from 'date-fns';

@Injectable()
export class FoodScheduleService {
  constructor(private prisma: PrismaService) {}

  async create(data: CreateFoodScheduleDto) {
    return this.prisma.foodSchedule.create({
      data: {
        date: new Date(data.date),
        foodId: data.foodId,
      },
    });
  }

  async findAll(date?: string) {
    // ‚úÖ Chuy·ªÉn ƒë·ªïi date (YYYY-MM-DD) th√†nh ƒë·∫ßu v√† cu·ªëi th√°ng
    let parsedDate = new Date(date);
    if (isNaN(parsedDate.getTime())) {
      throw new Error('Invalid date format. Use YYYY-MM-DD');
    }

    const startDate = startOfMonth(parsedDate);
    const endDate = endOfMonth(parsedDate);

    // ‚úÖ L·∫•y t·∫•t c·∫£ FoodSchedule trong th√°ng
    const foodSchedules = await this.prisma.foodSchedule.findMany({
      where: {
        date: { gte: startDate, lte: endDate },
      },
      select: {
        id: true,
        date: true,
        foodId: true, // ‚úÖ ƒê·∫£m b·∫£o l·∫•y `foodId`
        food: true, // ‚úÖ Prisma s·∫Ω t·ª± b·ªè `food` n·∫øu `foodId = NULL`
        createdAt: true,
        updatedAt: true,
      },
    });

    // ‚úÖ T·∫°o danh s√°ch ng√†y trong th√°ng
    const daysInMonth = eachDayOfInterval({ start: startDate, end: endDate });

    // ‚úÖ Gh√©p data t·ª´ DB v·ªõi danh s√°ch ng√†y
    const result = daysInMonth.map((day) => {
      const formattedDate = format(day, 'yyyy-MM-dd');
      const found = foodSchedules.find((fs) =>
        fs.date.toISOString().startsWith(formattedDate),
      );

      return found || { date: day, food: null }; // N·∫øu kh√¥ng c√≥ th√¨ food = null
    });

    return result;
  }

  async findOne(id: string) {
    return this.prisma.foodSchedule.findUnique({
      where: { id },
      include: { food: true },
    });
  }

  async update(date: string, foodId: string | null) {
    const existingSchedule = await this.prisma.foodSchedule.findFirst({
      where: { date: new Date(date) }, // üî• T√¨m theo ng√†y
    });

    if (!existingSchedule) {
      throw new Error('FoodSchedule not found for this date');
    }

    // N·∫øu foodId kh√¥ng null, ki·ªÉm tra xem food c√≥ t·ªìn t·∫°i kh√¥ng
    if (foodId) {
      const foodExists = await this.prisma.food.findUnique({
        where: { id: foodId },
      });
      if (!foodExists) {
        throw new Error('Food not found');
      }
    }

    return this.prisma.foodSchedule.update({
      where: { id: existingSchedule.id }, // C·∫≠p nh·∫≠t theo `id` t√¨m ƒë∆∞·ª£c
      data: { foodId }, // ‚úÖ Gi·ªØ nguy√™n `foodId`, kh√¥ng √©p null
    });
  }

  async removeByDate(date: string) {
    return this.prisma.foodSchedule.deleteMany({
      where: { date: new Date(date) },
    });
  }

  async resetFoodSchedule() {
    await this.prisma.foodSchedule.deleteMany({});
    return { message: 'All food schedules have been deleted' };
  }
}
